// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: nameservice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NameServiceClient is the client API for NameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameServiceClient interface {
	// Register a DNS record.
	Register(ctx context.Context, opts ...grpc.CallOption) (NameService_RegisterClient, error)
	// Resolve a DNS name to a list of IP addresses.
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
}

type nameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameServiceClient(cc grpc.ClientConnInterface) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) Register(ctx context.Context, opts ...grpc.CallOption) (NameService_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &NameService_ServiceDesc.Streams[0], "/qeco.apis.kns.v1.NameService/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameServiceRegisterClient{stream}
	return x, nil
}

type NameService_RegisterClient interface {
	Send(*RegisterRequest) error
	Recv() (*RegisterResponse, error)
	grpc.ClientStream
}

type nameServiceRegisterClient struct {
	grpc.ClientStream
}

func (x *nameServiceRegisterClient) Send(m *RegisterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nameServiceRegisterClient) Recv() (*RegisterResponse, error) {
	m := new(RegisterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nameServiceClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, "/qeco.apis.kns.v1.NameService/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameServiceServer is the server API for NameService service.
// All implementations must embed UnimplementedNameServiceServer
// for forward compatibility
type NameServiceServer interface {
	// Register a DNS record.
	Register(NameService_RegisterServer) error
	// Resolve a DNS name to a list of IP addresses.
	Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error)
	mustEmbedUnimplementedNameServiceServer()
}

// UnimplementedNameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNameServiceServer struct {
}

func (UnimplementedNameServiceServer) Register(NameService_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNameServiceServer) Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedNameServiceServer) mustEmbedUnimplementedNameServiceServer() {}

// UnsafeNameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameServiceServer will
// result in compilation errors.
type UnsafeNameServiceServer interface {
	mustEmbedUnimplementedNameServiceServer()
}

func RegisterNameServiceServer(s grpc.ServiceRegistrar, srv NameServiceServer) {
	s.RegisterService(&NameService_ServiceDesc, srv)
}

func _NameService_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NameServiceServer).Register(&nameServiceRegisterServer{stream})
}

type NameService_RegisterServer interface {
	Send(*RegisterResponse) error
	Recv() (*RegisterRequest, error)
	grpc.ServerStream
}

type nameServiceRegisterServer struct {
	grpc.ServerStream
}

func (x *nameServiceRegisterServer) Send(m *RegisterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nameServiceRegisterServer) Recv() (*RegisterRequest, error) {
	m := new(RegisterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NameService_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qeco.apis.kns.v1.NameService/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameService_ServiceDesc is the grpc.ServiceDesc for NameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qeco.apis.kns.v1.NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _NameService_Resolve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _NameService_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nameservice.proto",
}
